@page "/Login"
@using Yrhacks2023.Shared
@using System.Security.Cryptography
@using System.Text
@using Blazored.LocalStorage
@using System.Net
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject ILocalStorageService Lss
<PageTitle>Log In/BASEL</PageTitle>
<PageHeader/>


<div class="page-content">
    <div class="login-card">
        <div class="center-login">
            <h2 class="login-title">Hello!</h2>
            <p>Sign into BASEL here. <a href="/Register">Need an account?</a></p>
            <div class="login-fields">
                <div class="login-form">
                    <input @bind="_username" type="text" class="text-input" placeholder="Email or Username"/>

                    <!-- Text input -->
                    <input @bind="_password" type="password" class=" text-input" placeholder="Password"/>

                    <input @onclick="SendLogin" value="Log in" type="submit" class="pass-submit">
                    <p style="display: @(_errMsg.Length == 0 ? "none" : "block"); color: red">@_errMsg</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string _username = "";
    private string _password = "";
    private string _errMsg = "";

    async void SendLogin()
    {
        var request = new LoginRequest()
        {
            Username = _username,
            Password = SHA512.HashData(Encoding.UTF8.GetBytes(_password))
        };

        HttpResponseMessage response = await HttpClient.PostAsJsonAsync("AccountApi/Login", request);
        switch (response.StatusCode)
        {
            case HttpStatusCode.OK:
            {
                break;
            }
            case HttpStatusCode.Unauthorized or HttpStatusCode.BadRequest:
            {
                _errMsg = "Invalid username and/or password.";
                StateHasChanged();
                return;
            }
            default:
            {
                int statusCodeInt = (int) response.StatusCode;
                if (statusCodeInt is >= 500 and < 600)
                    _errMsg = "Server is having issues. Try again in a few seconds.";
                else
                    _errMsg = $"Unexpected status code: {statusCodeInt}.";
                StateHasChanged();
                return;
            }
        }
        await Lss.SetItemAsStringAsync("token", await response.Content.ReadAsStringAsync());
    }

}